SET UP 1 MASTER AND 2 WORKER
https://www.linuxtechi.com/install-kubernetes-using-kubespray/


1. INSTALL UBUNTU SERVER
2. SET THE NETWORK AS BELOW. ASSIGN UNIQUE TO ENP0S3 INTERFACE. ENP0S8 IS FOR EXTERNAL CONNECTION.

vi vi /etc/netplan/50-cloud-init.yaml
*********************************************************************************************************
	# This file is generated from information provided by the datasource.  Changes
# to it will not persist across an instance reboot.  To disable cloud-init's
# network configuration capabilities, write a file
# /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:
# network: {config: disabled}
network:
    ethernets:
        enp0s3:
            dhcp4: false
            addresses: [10.0.2.15/24]
            gateway4: 10.0.2.2
            nameservers:
                addresses: [192.168.189.1,8.8.8.8,8.8.8.4]
        enp0s8:
            dhcp4: yes
    version: 2
*********************************************************************************************************
3. HOSTNAMES CAN BE SET BY hostnamectl set-hostname



SETUP KUBESPRAY - all on master node /home/ashish

NODE IP
UBUNTU: 192.168.189.49
MASTER0: 192.168.189.57
MASTER1: 192.168.189.58
WORKER0: 192.168.189.59
WORKER1: 192.168.189.60

sudo apt update && sudo apt upgrade -y
sudo apt install git python3 python3-pip -y
git clone https://github.com/kubernetes-incubator/kubespray.git
cd kubespray
sudo apt install -y python3-pip ansible-core
pip install -r requirements.txt

if error: error: externally-managed-environment
rm /usr/lib/python3.12/EXTERNALLY-MANAGE and re-execute pip install -r requirements.txt


ansible --version
cp -rfp inventory/sample inventory/mycluster

declare -a IPS=(192.168.189.53 192.168.189.17 192.168.189.56)
pip install  ruamel.yam

CONFIG_FILE=inventory/mycluster/hosts.yaml python3 contrib/inventory_builder/inventory.py ${IPS[@]}

vi inventory/mycluster/hosts.yaml
*********************************************************************************************************
all:
  hosts:
    node1:
      ansible_host: 192.168.189.53
      ip: 192.168.189.53
      access_ip: 192.168.189.53
    node2:
      ansible_host: 192.168.189.17
      ip: 192.168.189.17
      access_ip: 192.168.189.17
    node3:
      ansible_host: 192.168.189.56
      ip: 192.168.189.56
      access_ip: 192.168.189.56
  children:
    kube_control_plane:
      hosts:
        node1:
    kube_node:
      hosts:
        node2:
        node3:
    etcd:
      hosts:
        node1:
    k8s_cluster:
      children:
        kube_control_plane:
        kube_node:
    calico_rr:
      hosts: {}

*********************************************************************************************************

vi inventory/mycluster/group_vars/k8s_cluster/k8s-cluster.yml
********************************************************************************************************
kube_version: v1.26.2
kube_network_plugin: calico
kube_pods_subnet: 10.233.64.0/18
kube_service_addresses: 10.233.0.0/18
cluster_name: linuxtechi.local
********************************************************************************************************

vi inventory/mycluster/group_vars/k8s_cluster/addons.yml
********************************************************************************************************
dashboard_enabled: true
ingress_nginx_enabled: true
ingress_nginx_host_network: true
********************************************************************************************************

Only below 1 command to be executed on all nodes


ansible all -i inventory/mycluster/hosts.yaml -m shell -a "sudo systemctl stop firewalld && sudo systemctl disable firewalld"

ansible all -i inventory/mycluster/hosts.yaml -m shell -a "echo 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf"
ansible all -i inventory/mycluster/hosts.yaml -m shell -a "sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab && sudo swapoff -a"

ansible-playbook -i inventory/mycluster/hosts.yaml --become --become-user=root cluster.yml

start all vms
ssh-keygen
ssh-copy-id -i /Users/ashisgoe/.ssh/id_ed25519 ashish@192.168.189.5
ssh ashish@192.168.189.5
ssh ashish@192.168.189.57
ssh ashish@192.168.189.57
ssh-copy-id -i /Users/ashisgoe/.ssh/id_ed25519 ashish@192.168.189.57
ssh-copy-id -i /Users/ashisgoe/.ssh/id_ed25519 ashish@192.168.189.58
ssh-copy-id -i /Users/ashisgoe/.ssh/id_ed25519 ashish@192.168.189.59
ssh-copy-id -i /Users/ashisgoe/.ssh/id_ed25519 ashish@192.168.189.60
vboxmanage list vms
for i in `vboxmanage list vms | cut -f1 -d " " | sed 's|[",]||g'`; do vboxmanage startvm $i --type=headless;done


helm install metallb metallb/metallb --create-namespace --namespace=metallb 

ashisgoe@M-C02DV9YAMD6R nginx % kubectl api-resources | grep metallb
bfdprofiles                                      metallb.io/v1beta1                       true         BFDProfile
bgpadvertisements                                metallb.io/v1beta1                       true         BGPAdvertisement
bgppeers                                         metallb.io/v1beta2                       true         BGPPeer
communities                                      metallb.io/v1beta1                       true         Community
ipaddresspools                                   metallb.io/v1beta1                       true         IPAddressPool
l2advertisements                                 metallb.io/v1beta1                       true         L2Advertisement
servicel2statuses                                metallb.io/v1beta1                       true         ServiceL2Status

helm install nginx-ingress ingress-nginx/ingress-nginx --create-namespace -n ingress-nginx
ashisgoe@M-C02DV9YAMD6R nginx % kubectl edit daemonset nginx-ingress-ingress-nginx-controller -n ingress-nginx
            - --enable-ssl-passthrough
            
            
daemonset.apps/nginx-ingress-ingress-nginx-controller edited


helm install metallb metallb/metallb -n metallb

kubectl apply -f metallb-ippool.yaml -n metallb
kubectl apply -f metallb-l2adv.yaml -n metallb
kubectl get svc -A
 
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
kubectl add ingress (apply the ingress file)

With TLS - ARGOCD
https://soappanda.medium.com/argocd-and-cert-manager-tls-ssl-certificates-integration-in-depth-guide-03199da8257a

 
